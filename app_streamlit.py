import streamlit as st
import pandas as pd
import os
import io
import contextlib
import sys # Importa sys para redirecionamento de stdout
import tempfile # Importa tempfile para lidar com arquivos tempor√°rios

# Classe para capturar a sa√≠da do console
class StreamlitConsoleCapture(io.StringIO):
    def __init__(self, target_stream=None):
        super().__init__()
        self.target_stream = target_stream # Onde a sa√≠da deveria ir originalmente (e.g., sys.stdout)

    def write(self, s):
        super().write(s)
        if self.target_stream:
            self.target_stream.write(s) # Mant√©m a sa√≠da indo para o console real

    def flush(self):
        super().flush()
        if self.target_stream:
            self.target_stream.flush()
            
# --- FUN√á√ÉO DE AN√ÅLISE COMPLETA E ATUALIZADA ---
def analisar_planilha_financeira(caminho_arquivo):
    """
    L√™ uma planilha de transa√ß√µes financeiras, categoriza e agrupa os dados.
    Esta √© a sua fun√ß√£o 'analisar_planilha_financeira' final e corrigida.
    """
    print(f"\nTentando ler o arquivo: {caminho_arquivo}")

    if not os.path.exists(caminho_arquivo):
        print(f"Erro: O arquivo '{caminho_arquivo}' n√£o foi encontrado.")
        return {"error": f"O arquivo '{caminho_arquivo}' n√£o foi encontrado."}

    try:
        # Tenta ler o arquivo Excel ou CSV
        if caminho_arquivo.endswith('.xlsx') or caminho_arquivo.endswith('.xls'):
            df = pd.read_excel(caminho_arquivo)
        elif caminho_arquivo.endswith('.csv'):
            try:
                df = pd.read_csv(caminho_arquivo, sep=';', encoding='utf-8', decimal=',', thousands='.')
            except Exception as e:
                print(f"Aviso: Falha na leitura avan√ßada do CSV: {e}. Tentando leitura b√°sica...")
                df = pd.read_csv(caminho_arquivo, sep=';', encoding='utf-8')
        else:
            print("Erro: Formato de arquivo n√£o suportado. Por favor, use .xlsx, .xls ou .csv.")
            return {"error": "Formato de arquivo n√£o suportado. Por favor, use .xlsx, .xls ou .csv."}

        print("Arquivo lido com sucesso!")
        
        # Normaliza os nomes das colunas
        df.columns = df.columns.str.lower().str.replace(' ', '_').str.normalize('NFKD').str.encode('ascii', errors='ignore').str.decode('utf-8')

        colunas_esperadas = {
            'valor': ['valor', 'quantia', 'montante'],
            'data': ['data', 'data_transacao', 'data_pagamento', 'data_recebimento'],
            'tipo': ['tipo', 'categoria', 'natureza'],
            'conta_bancaria': ['conta', 'conta_bancaria', 'banco']
        }

        colunas_encontradas = {}
        for esperado, possiveis in colunas_esperadas.items():
            for possivel in possiveis:
                if possivel in df.columns:
                    colunas_encontradas[esperado] = possivel
                    break
            if esperado not in colunas_encontradas:
                print(f"Aviso: N√£o foi poss√≠vel encontrar a coluna '{esperado}' (tentou: {', '.join(possiveis)}).")
                # Se uma coluna essencial como 'valor' ou 'data' n√£o for encontrada, retorne erro.
                if esperado in ['valor', 'data']:
                    return {"error": f"Coluna essencial '{esperado}' n√£o encontrada. Verifique os nomes das colunas na sua planilha."}
                # Para outras colunas, continue, mas elas n√£o ser√£o usadas nos agrupamentos correspondentes.


        df = df.rename(columns={v: k for k, v in colunas_encontradas.items()})

        # Processamento da coluna 'valor'
        if 'valor' in df.columns:
            df['valor'] = df['valor'].astype(str)
            df['valor'] = df['valor'].str.replace('R$', '', regex=False) \
                                     .str.replace('.', '', regex=False) \
                                     .str.replace(',', '.', regex=False) \
                                     .str.strip()
            df['valor'] = pd.to_numeric(df['valor'], errors='coerce')
            df.dropna(subset=['valor'], inplace=True)
        else:
            print("Erro: Coluna 'valor' n√£o encontrada ou inv√°lida ap√≥s normaliza√ß√£o.")
            return {"error": "Coluna 'valor' n√£o encontrada ou inv√°lida ap√≥s normaliza√ß√£o."}

        # Processamento da coluna 'data'
        if 'data' in df.columns:
            df['data'] = pd.to_datetime(df['data'], format='%d/%m/%Y', errors='coerce')
            df.dropna(subset=['data'], inplace=True)
            # --- NOVO: Formatar a coluna 'data' para exibi√ß√£o em formato BR (DD/MM/AAAA) ---
            df['data_br'] = df['data'].dt.strftime('%d/%m/%Y')
        else:
            print("Erro: Coluna 'data' n√£o encontrada ou inv√°lida ap√≥s normaliza√ß√£o.")
            return {"error": "Coluna 'data' n√£o encontrada ou inv√°lida ap√≥s normaliza√ß√£o."}

        # Padroniza a coluna 'tipo' ou infere
        if 'tipo' in df.columns:
            df['tipo_original'] = df['tipo'].astype(str).str.lower().str.strip()
            # Limpeza mais agressiva para caracteres n√£o alfanum√©ricos
            df['tipo_original'] = df['tipo_original'].str.replace(r'[^a-z\s]', '', regex=True).str.strip()

            mapeamento_tipo = {
                'receita': 'Receita', 'entrada': 'Receita', 'ganho': 'Receita',
                'pagamento': 'Despesa', 'despesa': 'Despesa', 'saida': 'Despesa', 'gasto': 'Despesa'
            }
            df['tipo_categorizado'] = df['tipo_original'].map(mapeamento_tipo).fillna('Outros')
            
            # Corre√ß√£o final: Se o valor for negativo, force como Despesa
            # Usa o 'tipo_categorizado' como fallback se o valor n√£o for negativo
            df['tipo'] = df.apply(lambda row: 'Despesa' if row['valor'] < 0 else row['tipo_categorizado'], axis=1)
            
        else:
            print("Aviso: Coluna 'tipo' n√£o encontrada. Inferindo tipo pelo sinal do 'valor'.")
            df['tipo'] = df['valor'].apply(lambda x: 'Receita' if x >= 0 else 'Despesa')

        # Remove colunas auxiliares se elas foram criadas
        if 'tipo_original' in df.columns:
            df.drop(columns=['tipo_original'], inplace=True)
        if 'tipo_categorizado' in df.columns:
            df.drop(columns=['tipo_categorizado'], inplace=True)

        # Usar a coluna formatada para as transa√ß√µes de detalhes
        # Criar uma c√≥pia para evitar SettingWithCopyWarning
        transacoes_receitas = df[df['tipo'] == 'Receita'].copy()
        transacoes_despesas = df[df['tipo'] == 'Despesa'].copy()

        # Selecionar e reordenar colunas para exibi√ß√£o, usando 'data_br'
        if 'data_br' in df.columns:
            colunas_exibicao = ['data_br', 'valor', 'tipo', 'conta_bancaria', 'descricao']
            # Garante que 'descricao' e 'conta_bancaria' existam antes de selecionar
            colunas_exibicao = [col for col in colunas_exibicao if col in df.columns]

            transacoes_receitas = transacoes_receitas[colunas_exibicao].rename(columns={'data_br': 'data'})
            transacoes_despesas = transacoes_despesas[colunas_exibicao].rename(columns={'data_br': 'data'})
        # else: se data_br n√£o existe, as colunas padr√£o ser√£o usadas pelo dataframe, sem a formata√ß√£o BR


        resultados = {}

        total_receber = transacoes_receitas['valor'].sum()
        total_pagar = transacoes_despesas['valor'].sum() # Esta soma ser√° negativa se as despesas forem negativas
        saldo_total = total_receber + total_pagar

        resultados['Resumo Geral'] = {
            'Total a Receber': f"R$ {total_receber:,.2f}",
            'Total a Pagar': f"R$ {abs(total_pagar):,.2f}", # Usa abs para mostrar valor positivo
            'Saldo Total': f"R$ {saldo_total:,.2f}"
        }

        # Transa√ß√µes Agrupadas por Tipo
        resultados['Transa√ß√µes por Tipo'] = df.groupby('tipo')['valor'].sum().apply(lambda x: f"R$ {x:,.2f}").to_dict()

        # Transa√ß√µes Agrupadas por Conta Banc√°ria
        if 'conta_bancaria' in df.columns:
            resultados['Saldo por Conta Banc√°ria'] = df.groupby('conta_bancaria')['valor'].sum().apply(lambda x: f"R$ {x:,.2f}").to_dict()
        else:
            resultados['Saldo por Conta Banc√°ria'] = "Coluna 'conta_bancaria' n√£o encontrada para agrupamento."

        # Detalhes das Transa√ß√µes (primeiras 10 de cada tipo)
        resultados['Detalhes das Transa√ß√µes (Receitas - Primeiras 10)'] = \
            transacoes_receitas.head(10)
        resultados['Detalhes das Transa√ß√µes (Despesas - Primeiras 10)'] = \
            transacoes_despesas.head(10)

        # Transa√ß√µes por M√™s (se houver coluna de data)
        if 'data' in df.columns:
            df['mes_ano'] = df['data'].dt.to_period('M')
            resultados['Transa√ß√µes por M√™s'] = df.groupby('mes_ano')['valor'].sum().apply(lambda x: f"R$ {x:,.2f}").to_dict()
        else:
            resultados['Transa√ß√µes por M√™s'] = "Coluna 'data' n√£o encontrada para agrupamento mensal."

        return resultados

    except Exception as e:
        erro_msg = f"Ocorreu um erro ao processar a planilha: {e}"
        print(erro_msg) # Continua imprimindo no console de execu√ß√£o do streamlit
        return {"error": erro_msg} # Retorna um dicion√°rio com a mensagem de erro
# --- FIM DA FUN√á√ÉO DE AN√ÅLISE ---

st.set_page_config(layout="wide") # Para usar a largura m√°xima da tela

st.title("üìä Analisador de Finan√ßas")
st.write("Fa√ßa upload de sua planilha de transa√ß√µes financeiras para obter um resumo detalhado.")

uploaded_file = st.file_uploader("Escolha um arquivo Excel ou CSV", type=["xlsx", "xls", "csv"])

if uploaded_file is not None:
    file_details = {"FileName":uploaded_file.name,"FileType":uploaded_file.type,"FileSize":uploaded_file.size}
    st.write(file_details)

    # Usar um tempfile para garantir que o arquivo seja lido corretamente pelo pandas
    with tempfile.NamedTemporaryFile(delete=False, suffix=os.path.splitext(uploaded_file.name)[1]) as tmp_file:
        tmp_file.write(uploaded_file.getvalue())
        temp_path = tmp_file.name

    # --- NOVA L√ìGICA DE CAPTURA DE SA√çDA E TRATAMENTO DE ERROS ---
    console_output = StreamlitConsoleCapture(sys.stdout)
    
    # Redireciona stdout temporariamente para a nossa classe de captura
    with contextlib.redirect_stdout(console_output):
        resultados = analisar_planilha_financeira(temp_path)
    
    captured_text = console_output.getvalue() # Pega tudo que foi "printado"
    
    if resultados and "error" in resultados: # Se a fun√ß√£o retornou um dicion√°rio de erro
        st.error(f"**Ocorreu um erro ao processar a planilha:**\n{resultados['error']}")
        if captured_text:
            st.subheader("Detalhes do Console (para depura√ß√£o):")
            st.code(captured_text) # Mostra a sa√≠da do console no Streamlit
    elif resultados: # Se a an√°lise foi bem-sucedida (n√£o √© None e n√£o tem chave 'error')
        st.success("An√°lise conclu√≠da com sucesso!")
        
        # --- SE√á√ïES DO RELAT√ìRIO NO STREAMLIT (SEU C√ìDIGO ATUAL) ---
        st.header("Sum√°rio Geral")
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Total a Receber", resultados['Resumo Geral']['Total a Receber'])
        with col2:
            st.metric("Total a Pagar", resultados['Resumo Geral']['Total a Pagar'])
        with col3:
            st.metric("Saldo Total", resultados['Resumo Geral']['Saldo Total'])

        st.header("Transa√ß√µes por Tipo")
        df_tipo = pd.DataFrame(list(resultados['Transa√ß√µes por Tipo'].items()), columns=['Tipo', 'Total'])
        st.table(df_tipo)

        if isinstance(resultados['Saldo por Conta Banc√°ria'], dict):
            st.header("Saldo por Conta Banc√°ria")
            df_contas = pd.DataFrame(list(resultados['Saldo por Conta Banc√°ria'].items()), columns=['Conta', 'Saldo'])
            st.table(df_contas)
        else:
            st.info(resultados['Saldo por Conta Banc√°ria'])

        st.header("Transa√ß√µes por M√™s")
        if isinstance(resultados['Transa√ß√µes por M√™s'], dict):
            df_mes = pd.DataFrame(list(resultados['Transa√ß√µes por M√™s'].items()), columns=['M√™s/Ano', 'Total'])
            st.table(df_mes)
        else:
            st.info(resultados['Transa√ß√µes por M√™s'])

        st.header("Detalhes das Transa√ß√µes")
        tab1, tab2 = st.tabs(["Receitas", "Despesas"])
        with tab1:
            st.subheader("Receitas (Primeiras 10)")
            if not resultados['Detalhes das Transa√ß√µes (Receitas - Primeiras 10)'].empty:
                st.dataframe(resultados['Detalhes das Transa√ß√µes (Receitas - Primeiras 10)'])
            else:
                st.info("Nenhuma receita encontrada.")
        with tab2:
            st.subheader("Despesas (Primeiras 10)")
            if not resultados['Detalhes das Transa√ß√µes (Despesas - Primeiras 10)'].empty:
                st.dataframe(resultados['Detalhes das Transa√ß√µes (Despesas - Primeiras 10)'])
            else:
                st.info("Nenhuma despesa encontrada.")
        # --- FIM DAS SE√á√ïES DO RELAT√ìRIO ---

        if captured_text: # Mostra a sa√≠da do console se houver algo
            st.subheader("Logs da An√°lise:")
            st.code(captured_text)
    else: # Caso a fun√ß√£o retorne None ou algo inesperado
        st.error("Ocorreu um erro desconhecido durante a an√°lise da planilha.")
        if captured_text:
            st.subheader("Detalhes do Console (para depura√ß√£o):")
            st.code(captured_text)
    
    os.unlink(temp_path) # Limpa o arquivo tempor√°rio
    
st.sidebar.markdown("### Cr√©ditos")
st.sidebar.write("Este aplicativo foi desenvolvido por Danillo Wozniak Soares.")
st.sidebar.markdown("---")
st.sidebar.markdown("### Sobre o Aplicativo")
st.sidebar.write("Este aplicativo permite analisar suas finan√ßas pessoais a partir de uma planilha de transa√ß√µes financeiras.")
st.sidebar.markdown("### Como Usar")
st.sidebar.write("1. Fa√ßa upload de uma planilha no formato Excel (.xlsx, .xls) ou CSV (.csv).")
st.sidebar.write("2. O aplicativo ir√° gerar um resumo detalhado das suas finan√ßas, incluindo totais a receber, a pagar e saldo total.")
st.sidebar.markdown("### Requisitos da planilha")
st.sidebar.write("A planilha deve conter as seguintes colunas:")
st.sidebar.write("- **Valor**: Valores das transa√ß√µes (pode ser chamado de 'quantia', 'montante', etc.)")
st.sidebar.write("- **Data**: Data da transa√ß√£o (pode ser chamado de 'data_transacao', 'data_pagamento', etc.)")
st.sidebar.write("- **Tipo**: Tipo da transa√ß√£o (pode ser chamado de 'categoria', 'natureza', etc.)")
st.sidebar.write("- **Conta Banc√°ria**: (opcional) Conta banc√°ria associada √† transa√ß√£o (pode ser chamado de 'conta', 'conta_bancaria', etc.)")
st.sidebar.markdown("### Recursos")
st.sidebar.write("- Resumo Geral das Finan√ßas")
st.sidebar.write("- Transa√ß√µes agrupadas por tipo")
st.sidebar.write("- Saldo por Conta Banc√°ria (se dispon√≠vel)")
st.sidebar.write("- Detalhes das Transa√ß√µes (primeiras 10 de cada tipo)")
st.sidebar.markdown("### Contato") 
st.sidebar.write("Para feedback ou sugest√µes, entre em contato com o desenvolvedor.")